"use client"

import { useEffect, useState } from "react"
import QuoteFormInputs from "./QuoteFormInputs"
import QuoteSummary from "./QuoteSummary"
import QuoteHtmlPreview from "./QuoteHtmlPreview"
import useQuoteCalculations from "./useQuoteCalculations"
import { useQuoteEmail } from "./hooks/useQuoteEmail"
import submitQuoteToApi from "../helpers/submitQuoteToApi"
import { PDFDownloadLink } from "@react-pdf/renderer"
import QuotePDF from "./QuotePDF"

type FormState = {
    roundtrip: string
    fsc: string
    company: string
    destination: string
    requestor: string
    linehaul: string
    fuel: string
    prePull: string
    chassis: string
    stopOff: string
    storage: string
    hazMat: string
    reefer: string
    dryRun: string
    manualAdjustment: string
    specialInstructions: string
    promoCode: string
    promoDiscount: number
    validThrough: string
  }
  
  const initialForm: FormState = {
    roundtrip: "",
    fsc: "0.32",
    company: "",
    destination: "",
    requestor: "",
    linehaul: "",
    fuel: "",
    prePull: "",
    chassis: "",
    stopOff: "",
    storage: "",
    hazMat: "",
    reefer: "",
    dryRun: "",
    manualAdjustment: "",
    specialInstructions: "",
    promoCode: "",
    promoDiscount: 0,
    validThrough: ""
  }
  

export default function QuoteLoggerForm() {
    const [form, setForm] = useState<FormState>(initialForm)

  const [rates, setRates] = useState([])
  const [loadingDistance, setLoadingDistance] = useState(false)
  const [submitting, setSubmitting] = useState(false)
  const [submitted, setSubmitted] = useState(false)

  const { calculateTotals, formatCurrency, generateQuoteHtml } = useQuoteCalculations()
  const { accessorialTotal, baseRate, manualAdjustment, discount, totalRate, validThrough } = calculateTotals(form)
  const { send, sending } = useQuoteEmail({ form: { ...form, generateQuoteHtml }, totals: { accessorialTotal, baseRate, manualAdjustment, discount, totalRate, validThrough } })

  useEffect(() => {
    fetch('/api/rates')
      .then(res => res.json())
      .then(setRates)
      .catch(console.error)
  }, [])

  useEffect(() => {
    const originZip = "90802"
    const destZip = form.destination.trim()

    const timer = setTimeout(() => {
      if (destZip.length === 5) {
        const getDistance = async () => {
          if (!rates.length) return;
          setLoadingDistance(true)
          try {
            const response = await fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?origins=${originZip}&destinations=${destZip}&units=imperial&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`)
            const data = await response.json()
            const oneWayMiles = data.rows[0].elements[0].distance.value / 1609.34
            const roundtrip = Math.round(oneWayMiles * 2)

            const match = rates.find(row => roundtrip <= row.miles)
            let baseRate, fuel

            if (match) {
              baseRate = match.baseRate
              fuel = baseRate * (parseFloat(form.fsc) || 0.32)
            } else {
              baseRate = roundtrip * 2.3
              fuel = baseRate * (parseFloat(form.fsc) || 0.32)
            }

            setForm(prev => ({
              ...prev,
              roundtrip: roundtrip.toString(),
              linehaul: baseRate.toFixed(2),
              fuel: fuel.toFixed(2)
            }))
          } catch (err) {
            console.error("Mileage API error:", err)
          } finally {
            setLoadingDistance(false)
          }
        }
        getDistance()
      }
    }, 500)

    return () => clearTimeout(timer)
  }, [form.destination, form.fsc, rates])

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value })
  }

  const handleSubmit = async () => {
    if (!form.company || !form.destination || !form.requestor) {
      alert("Please fill in required fields.")
      return
    }

    const payload = {
      company: form.company,
      destination: form.destination,
      linehaul: form.linehaul,
      fuel: form.fuel,
      promoCode: form.promoCode,
      validThrough: form.validThrough,
      specialInstructions: form.specialInstructions,
    }

    setSubmitting(true)

    try {
      const response = await submitQuoteToApi(payload)
      console.log("âœ… API response:", response)
      alert("âœ… Quote submitted successfully!")
      setSubmitted(true)
    } catch (error) {
      console.error("âŒ Error submitting quote:", error)
      alert("âŒ Failed to submit quote.")
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <div className="max-w-xl mx-auto mt-10">
      <QuoteFormInputs
        form={form}
        handleChange={handleChange}
        loadingDistance={loadingDistance}
        formatCurrency={formatCurrency}
      />
      <QuoteSummary
        form={form}
        formatCurrency={formatCurrency}
        totalRate={totalRate}
        accessorialTotal={accessorialTotal}
        handleSubmit={handleSubmit}
        submitting={submitting}
      />
      <QuoteHtmlPreview
        form={form}
        totals={{ accessorialTotal, baseRate, manualAdjustment, discount, totalRate, validThrough }}
        generateQuoteHtml={generateQuoteHtml}
      />
      <button
        onClick={send}
        disabled={sending}
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded"
      >
        {sending ? "Sending..." : "Send Quote via Email"}
      </button>
      {submitted && (
        <div className="mt-6">
          <PDFDownloadLink
            document={
              <QuotePDF
                company={form.company}
                destination={form.destination}
                requestor={form.requestor}
                linehaul={form.linehaul}
                fuel={form.fuel}
                accessorialTotal={accessorialTotal}
                manualAdjustment={manualAdjustment}
                totalRate={totalRate}
                validThrough={validThrough}
                specialInstructions={form.specialInstructions}
              />
            }
            fileName={`Quote_${form.company.replace(/\s+/g, "_")}.pdf`}
            className="mt-4 inline-block px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            {({ loading }) => (loading ? "Generating PDF..." : "ðŸ“„ Download Quote PDF")}
          </PDFDownloadLink>
        </div>
      )}
    </div>
  )
}
import React from "react"
import { Document, Page, Text, StyleSheet } from "@react-pdf/renderer"

type Props = {
  company: string
  destination: string
  requestor: string
  linehaul: string
  fuel: string
  accessorialTotal: number
  manualAdjustment: number
  totalRate: number
  validThrough: string
  specialInstructions?: string
}

const styles = StyleSheet.create({
  page: {
    padding: 30,
    fontSize: 12,
    fontFamily: "Helvetica",
    backgroundColor: "#ffffff",
  },
  heading: {
    fontSize: 18,
    marginBottom: 16,
    color: "#C42807",
  },
  section: {
    marginBottom: 10,
    lineHeight: 1.6,
  },
  label: {
    fontWeight: 700,
  },
})

const QuotePDF: React.FC<Props> = ({
  company,
  destination,
  requestor,
  linehaul,
  fuel,
  accessorialTotal,
  manualAdjustment,
  totalRate,
  validThrough,
  specialInstructions
}) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.heading}>ðŸ“„ Quote Confirmation</Text>
      <Text style={styles.section}><Text style={styles.label}>Company:</Text> {company}</Text>
      <Text style={styles.section}><Text style={styles.label}>Destination ZIP:</Text> {destination}</Text>
      <Text style={styles.section}><Text style={styles.label}>Requestor Email:</Text> {requestor}</Text>
      <Text style={styles.section}><Text style={styles.label}>Linehaul:</Text> ${linehaul}</Text>
      <Text style={styles.section}><Text style={styles.label}>Fuel:</Text> ${fuel}</Text>
      <Text style={styles.section}><Text style={styles.label}>Accessorials:</Text> ${accessorialTotal.toFixed(2)}</Text>
      <Text style={styles.section}><Text style={styles.label}>Manual Adjustment:</Text> ${manualAdjustment.toFixed(2)}</Text>
      <Text style={styles.section}><Text style={styles.label}>Total Rate:</Text> ${totalRate.toFixed(2)}</Text>
      <Text style={styles.section}><Text style={styles.label}>Valid Through:</Text> {validThrough}</Text>
      {specialInstructions && (
        <Text style={styles.section}>
          <Text style={styles.label}>Special Instructions:</Text> {specialInstructions}
        </Text>
      )}
    </Page>
  </Document>
)

export default QuotePDF
